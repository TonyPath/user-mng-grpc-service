// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"google.golang.org/protobuf/reflect/protoreflect"
	"sync"
)

// Ensure, that EventPublisherMock does implement EventPublisher.
// If this is not the case, regenerate this file with moq.
var _ EventPublisher = &EventPublisherMock{}

// EventPublisherMock is a mock implementation of EventPublisher.
//
// 	func TestSomethingThatUsesEventPublisher(t *testing.T) {
//
// 		// make and configure a mocked EventPublisher
// 		mockedEventPublisher := &EventPublisherMock{
// 			PublishFunc: func(ctx context.Context, topic string, key string, pbMessage protoreflect.ProtoMessage) error {
// 				panic("mock out the Publish method")
// 			},
// 		}
//
// 		// use mockedEventPublisher in code that requires EventPublisher
// 		// and then make assertions.
//
// 	}
type EventPublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, topic string, key string, pbMessage protoreflect.ProtoMessage) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topic is the topic argument value.
			Topic string
			// Key is the key argument value.
			Key string
			// PbMessage is the pbMessage argument value.
			PbMessage protoreflect.ProtoMessage
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *EventPublisherMock) Publish(ctx context.Context, topic string, key string, pbMessage protoreflect.ProtoMessage) error {
	if mock.PublishFunc == nil {
		panic("EventPublisherMock.PublishFunc: method is nil but EventPublisher.Publish was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Topic     string
		Key       string
		PbMessage protoreflect.ProtoMessage
	}{
		Ctx:       ctx,
		Topic:     topic,
		Key:       key,
		PbMessage: pbMessage,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, topic, key, pbMessage)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedEventPublisher.PublishCalls())
func (mock *EventPublisherMock) PublishCalls() []struct {
	Ctx       context.Context
	Topic     string
	Key       string
	PbMessage protoreflect.ProtoMessage
} {
	var calls []struct {
		Ctx       context.Context
		Topic     string
		Key       string
		PbMessage protoreflect.ProtoMessage
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
