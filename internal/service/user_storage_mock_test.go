// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/TonyPath/user-mng-grpc-service/internal/models"
	"github.com/google/uuid"
	"sync"
)

// Ensure, that userStorageMock does implement userStorage.
// If this is not the case, regenerate this file with moq.
var _ userStorage = &userStorageMock{}

// userStorageMock is a mock implementation of userStorage.
//
// 	func TestSomethingThatUsesuserStorage(t *testing.T) {
//
// 		// make and configure a mocked userStorage
// 		mockeduserStorage := &userStorageMock{
// 			DeleteUserFunc: func(ctx context.Context, userID uuid.UUID) error {
// 				panic("mock out the DeleteUser method")
// 			},
// 			ExistsByIDFunc: func(ctx context.Context, userID uuid.UUID) (bool, error) {
// 				panic("mock out the ExistsByID method")
// 			},
// 			GetUserByIDFunc: func(ctx context.Context, userID uuid.UUID) (models.User, error) {
// 				panic("mock out the GetUserByID method")
// 			},
// 			GetUsersByFilterFunc: func(ctx context.Context, opts models.GetUsersOptions) ([]models.User, error) {
// 				panic("mock out the GetUsersByFilter method")
// 			},
// 			InsertUserFunc: func(ctx context.Context, user models.User) (uuid.UUID, error) {
// 				panic("mock out the InsertUser method")
// 			},
// 			UpdateUserFunc: func(ctx context.Context, userID uuid.UUID, user models.User) error {
// 				panic("mock out the UpdateUser method")
// 			},
// 		}
//
// 		// use mockeduserStorage in code that requires userStorage
// 		// and then make assertions.
//
// 	}
type userStorageMock struct {
	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, userID uuid.UUID) error

	// ExistsByIDFunc mocks the ExistsByID method.
	ExistsByIDFunc func(ctx context.Context, userID uuid.UUID) (bool, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, userID uuid.UUID) (models.User, error)

	// GetUsersByFilterFunc mocks the GetUsersByFilter method.
	GetUsersByFilterFunc func(ctx context.Context, opts models.GetUsersOptions) ([]models.User, error)

	// InsertUserFunc mocks the InsertUser method.
	InsertUserFunc func(ctx context.Context, user models.User) (uuid.UUID, error)

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, userID uuid.UUID, user models.User) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// ExistsByID holds details about calls to the ExistsByID method.
		ExistsByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
		}
		// GetUsersByFilter holds details about calls to the GetUsersByFilter method.
		GetUsersByFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Opts is the opts argument value.
			Opts models.GetUsersOptions
		}
		// InsertUser holds details about calls to the InsertUser method.
		InsertUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User models.User
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID uuid.UUID
			// User is the user argument value.
			User models.User
		}
	}
	lockDeleteUser       sync.RWMutex
	lockExistsByID       sync.RWMutex
	lockGetUserByID      sync.RWMutex
	lockGetUsersByFilter sync.RWMutex
	lockInsertUser       sync.RWMutex
	lockUpdateUser       sync.RWMutex
}

// DeleteUser calls DeleteUserFunc.
func (mock *userStorageMock) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	if mock.DeleteUserFunc == nil {
		panic("userStorageMock.DeleteUserFunc: method is nil but userStorage.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, userID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockeduserStorage.DeleteUserCalls())
func (mock *userStorageMock) DeleteUserCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// ExistsByID calls ExistsByIDFunc.
func (mock *userStorageMock) ExistsByID(ctx context.Context, userID uuid.UUID) (bool, error) {
	if mock.ExistsByIDFunc == nil {
		panic("userStorageMock.ExistsByIDFunc: method is nil but userStorage.ExistsByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockExistsByID.Lock()
	mock.calls.ExistsByID = append(mock.calls.ExistsByID, callInfo)
	mock.lockExistsByID.Unlock()
	return mock.ExistsByIDFunc(ctx, userID)
}

// ExistsByIDCalls gets all the calls that were made to ExistsByID.
// Check the length with:
//     len(mockeduserStorage.ExistsByIDCalls())
func (mock *userStorageMock) ExistsByIDCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
	}
	mock.lockExistsByID.RLock()
	calls = mock.calls.ExistsByID
	mock.lockExistsByID.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *userStorageMock) GetUserByID(ctx context.Context, userID uuid.UUID) (models.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("userStorageMock.GetUserByIDFunc: method is nil but userStorage.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, userID)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockeduserStorage.GetUserByIDCalls())
func (mock *userStorageMock) GetUserByIDCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// GetUsersByFilter calls GetUsersByFilterFunc.
func (mock *userStorageMock) GetUsersByFilter(ctx context.Context, opts models.GetUsersOptions) ([]models.User, error) {
	if mock.GetUsersByFilterFunc == nil {
		panic("userStorageMock.GetUsersByFilterFunc: method is nil but userStorage.GetUsersByFilter was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Opts models.GetUsersOptions
	}{
		Ctx:  ctx,
		Opts: opts,
	}
	mock.lockGetUsersByFilter.Lock()
	mock.calls.GetUsersByFilter = append(mock.calls.GetUsersByFilter, callInfo)
	mock.lockGetUsersByFilter.Unlock()
	return mock.GetUsersByFilterFunc(ctx, opts)
}

// GetUsersByFilterCalls gets all the calls that were made to GetUsersByFilter.
// Check the length with:
//     len(mockeduserStorage.GetUsersByFilterCalls())
func (mock *userStorageMock) GetUsersByFilterCalls() []struct {
	Ctx  context.Context
	Opts models.GetUsersOptions
} {
	var calls []struct {
		Ctx  context.Context
		Opts models.GetUsersOptions
	}
	mock.lockGetUsersByFilter.RLock()
	calls = mock.calls.GetUsersByFilter
	mock.lockGetUsersByFilter.RUnlock()
	return calls
}

// InsertUser calls InsertUserFunc.
func (mock *userStorageMock) InsertUser(ctx context.Context, user models.User) (uuid.UUID, error) {
	if mock.InsertUserFunc == nil {
		panic("userStorageMock.InsertUserFunc: method is nil but userStorage.InsertUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User models.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockInsertUser.Lock()
	mock.calls.InsertUser = append(mock.calls.InsertUser, callInfo)
	mock.lockInsertUser.Unlock()
	return mock.InsertUserFunc(ctx, user)
}

// InsertUserCalls gets all the calls that were made to InsertUser.
// Check the length with:
//     len(mockeduserStorage.InsertUserCalls())
func (mock *userStorageMock) InsertUserCalls() []struct {
	Ctx  context.Context
	User models.User
} {
	var calls []struct {
		Ctx  context.Context
		User models.User
	}
	mock.lockInsertUser.RLock()
	calls = mock.calls.InsertUser
	mock.lockInsertUser.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *userStorageMock) UpdateUser(ctx context.Context, userID uuid.UUID, user models.User) error {
	if mock.UpdateUserFunc == nil {
		panic("userStorageMock.UpdateUserFunc: method is nil but userStorage.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID uuid.UUID
		User   models.User
	}{
		Ctx:    ctx,
		UserID: userID,
		User:   user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, userID, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockeduserStorage.UpdateUserCalls())
func (mock *userStorageMock) UpdateUserCalls() []struct {
	Ctx    context.Context
	UserID uuid.UUID
	User   models.User
} {
	var calls []struct {
		Ctx    context.Context
		UserID uuid.UUID
		User   models.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}
